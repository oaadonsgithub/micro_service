name: ECS Blue/Green Deployment with CodeDeployToECS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      
      - name: Generate ECS task definition
        run: |
          cat <<EOF > frontend-task-def.json
          {
            "family": "frontend-task",
            "executionRoleArn": "arn:aws:iam::537124950459:role/CodeDeploy-Service-role",
            "networkMode": "bridge",
            "containerDefinitions": [
              {
                "name": "web",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/web-ecr-repository:latest",
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80,
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/frontend",
                    "awslogs-region": "${{ secrets.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["EC2"],
            "cpu": "512",
            "memory": "1024"
          }
          EOF

      - name: Register and Deploy ECS task with CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          codedeploy-application: frontend-deploy
          codedeploy-deployment-group: frontend-deploy-group
          codedeploy-deployment-config: CodeDeployDefault.ECSAllAtOnce
          task-definition: frontend-task-def.json
          service: frontend
          cluster: application_cluster
          wait-for-service-stability: true