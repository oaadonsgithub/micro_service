name: Deploy via CodeDeploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  codedeploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - run: echo ${{ steps.extract_branch.outputs.branch }} ${{ github.repository }}

      - name: Create code ZIP for main
        if: ${{ steps.extract_branch.outputs.branch == 'main' }}
        run: aws deploy push --application-name frontend-deploy --description "This is a revision for the application mynodeapp" --ignore-hidden-files --s3-location s3://mynodeapplicationbucket/code.zip --source .
      

      - name: Upload and Deploy via CodeDeploy
        if: ${{ steps.extract_branch.outputs.branch == 'main' }}
        run: |
          REVISION_JSON=$(jq -n \
            --arg bucket "mynodeapplicationbucket" \
            --arg key "code.zip" \
            '{revisionType: "S3", s3Location: {bucket: $bucket, key: $key, bundleType: "zip"}}')

          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name frontend-deploy \
            --deployment-group-name frontend-deploy-group \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision "$REVISION_JSON" \
            --description "Deploy main branch via GitHub Actions" \
            | jq -r '.deploymentId')

          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id "$DEPLOYMENT_ID"

          echo "Deployment completed!"
          aws deploy get-deployment --deployment-id "$DEPLOYMENT_ID"
